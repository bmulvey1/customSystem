asm{
	entry code
data:
    #d "AOC22D1"
input:
    #d32 5    ; 5 inputs
    #d32 3    ; first input has 3 numbers
    #d32 1000 ; first input
    #d32 2000 ; first input
    #d32 3000 ; first input
    #d32 1    ; second input has 1 number
    #d32 4000 ; etc...
    #d32 2
    #d32 5000
    #d32 6000
    #d32 3
    #d32 7000
    #d32 8000
    #d32 9000
    #d32 1
    #d32 10000
    #d "ENDDATA"

#align 32
code:
    pushi $ input
    call elfCounter
    hlt
};

fun print(var value)
{
	// store r0, pull the argument into a register, then output that register
	asm{
		push %r0
		mov %r0, (%bp+8)
		out %r0
		pop %r0
	};
}

fun elfCounter(var *inputAddr)
{
    var *scratchMem = 2048;
    
    var bestElf[2]; // store best elf index and number of calories
    bestElf[0] = 0;
    bestElf[1] = 0;
    
    var nInputs = *inputAddr;
    inputAddr = inputAddr + 1;
    var i = 0;

    while(i < nInputs)
    {
        // initialize this sum to 0
        scratchMem[i] = 0;

        // read the number of numbers we expect to see in this input
        // then add each to the sum
        var thisInputSize = *inputAddr; 
        inputAddr = inputAddr + 1;
        var j = 0;
        while(j < thisInputSize)
        {
            var thisInput = inputAddr[j];
            scratchMem[i] = scratchMem[i] + thisInput;
            j = j + 1;
        }
        inputAddr = inputAddr + thisInputSize;
        if(scratchMem[i] > bestElf[1])
        {
            bestElf[0] = i;
            bestElf[1] = scratchMem[i];
        }
        i = i + 1;
    }

    // print which elf is best, and the number of calories associated with that elf
    print(bestElf[0] + 1);
    print(bestElf[1]);

    // print 0 as a spacer
    print(0);
    
    // print out what we calculated for every elf    
    i = 0;
    while(i < nInputs)
    {
        print(scratchMem[i]);
        i = i + 1;
    }
}
$$