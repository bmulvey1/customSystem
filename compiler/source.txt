/*
Pointer optimization:
Before - 8706 instructions
Mild pointer optimizations - use of offset(base, scale): 7483

*/

asm{
	#include "CPU.asm"
	entry code
	data@ data
code:
	push $4664
	call mm_init
	call doublePointer
	;call test
	hlt
};

fun print(var n){
	asm{
		out %r0
	};
}

fun ptest(){
	var **p = mm_malloc(8);
	var i = 0;
	while(i < 4){
		*(p + i) = mm_malloc(9);
		*(*(p + i)) = i + 48;
		i = i + 1;
	}
}

fun doublePointer(){
	var **array = mm_malloc(10); // allocate an array for 5 pointers
	print(array);
	var i = 0;
	while(i < 5){
		// allocate 16bytes of padding for visibility in the memory dump file
		mm_malloc(16); 

		// allocate 40 bytes (20 var's worth of space)
		var *thisFibArray = mm_malloc(40);

		// write the first 20 fibonacci numbers into the space we allocated
		firstnfibs(20, thisFibArray);

		// store the new array in our array array
		*(array + i) = thisFibArray;
		i = i + 1;
	}

	// loop through every index in the array and print the data
	i = 0;
	while(i < 5){
		var j = 0;
		print(*(array + i));
		while(j <= 20){
			print(*(*(array + i) + j));
			j = j + 1;
		}
		i = i + 1;
	}
}

// compute the first n fibonacci numbers (using pointers!)
fun firstnfibs(var n, var* dest){
	var *fibarr = dest;

	*fibarr = 0;
	*(fibarr + 1) = 1;

	var i = 2;
	while(i <= n){
		*(fibarr + i) = *(fibarr + i - 1) + *(fibarr + i - 2);
		i = i + 1;
	}
}
fun setBlockAllocated(var *blkPtr, var size, var isAllocated){
	*(blkPtr - 1) = isAllocated; // allocated flag in header
	*(blkPtr - 2) = size; // size flag in header
}

fun getBlockIsAllocated(var *blkPtr){
	return *(blkPtr - 1);
}

fun getBlockSize(var *blkPtr){
	return *(blkPtr - 2);
}

fun getBlockNext(var *blkPtr){
	return (blkPtr + *(blkPtr - 2) + 4);
}

fun mm_init(var size){
	var *dataAt = 2;
	var *blkPtr = (*dataAt) + 4;
	var newSize = size - 4;

	setBlockAllocated(blkPtr, newSize, 0);
	return 0;
}
fun mm_malloc(var size){
	print(size);
	var *dataAt = 2;
	var blkRunner = (*dataAt) + 4;
	var one = 1;
	var isa;
	var siz;
	while(one == 1){
		isa = getBlockIsAllocated(blkRunner);
		siz = getBlockSize(blkRunner);
		print(1234);
		print(isa);
		print(siz);
		if(getBlockIsAllocated(blkRunner) == 0){
			if(getBlockSize(blkRunner) >= size){
				var newSize = (getBlockSize(blkRunner) - size) - 4;
				setBlockAllocated(blkRunner, size, 1);
				var *newBlk = blkRunner + size + 4;
				setBlockAllocated(newBlk, newSize, 0);
				print(0);
				return blkRunner;
			}else{
				print(9999);
				asm{
					hlt
				};
				blkRunner = getBlockNext(blkRunner);
			}
		}else{
			print(blkRunner);
			blkRunner = getBlockNext(blkRunner);
		}
	}
	asm{
		#d "end_text"
	};
}

$$
