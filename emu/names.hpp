#include <string>
#pragma once
std::string opcodeNames[256] =
    {
        // Control Flow (0x00)
        "NOP",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0x08
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0x10
        "JMP",
        "JE/JZ",
        "JNE/JNZ",
        "JG",
        "JL",
        "JGE",
        "JLE",
        "UND",
        // 0x18
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0x20
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0x30
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // Arithmetic 0x40
        // Simple
        "ADD reg <- reg + reg",
        "SUB reg <- reg - reg",
        "MUL reg <- reg * reg",
        "DIV reg <- reg / reg",
        "SHR reg <- reg >> reg",
        "SHL reg <- reg << reg",
        "INC reg <- reg + 1",
        "DEC reg <- reg - 1",
        //
        "AND reg <- reg & reg",
        "OR  reg <- reg | reg",
        "XOR reg <- reg ^ reg",
        "NOT reg <- !reg",
        "CMP reg <- reg cmp reg",
        "UND",
        "UND",
        "UND",
        // Arithmetic 0x50
        // immediate
        "ADDI reg <- reg + imm",
        "SUBI reg <- reg - imm",
        "MULI reg <- reg * imm",
        "DIVI reg <- reg / imm",
        "SHRI reg <- reg >> imm",
        "SHLI reg <- reg << imm",
        "UND",
        "UND",
        //
        "ANDI reg <- reg & imm",
        "ORI  reg <- reg | imm",
        "XORI reg <- reg ^ imm",
        "UND",
        "CMPI reg <- reg cmp imm",
        "UND",
        "UND",
        "UND",
        // Arithmetic 0x60
        // register indirect with offset
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        // Arithmetic (0x70)
        // register indirect with scale and offset
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        // Arithmetic (0x80)
        // immediate
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0x90
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        // Data control (byte) 0xa0
        //
        "MOVB reg <- reg",
        "MOVB reg <- (reg)",
        "MOVB (reg) <- reg",
        "MOVB reg <- off16(reg)",
        "MOVB off16(reg) <- reg",
        "MOVB reg <- offreg(basereg, scale)",
        "MOVB offreg(basereg, scale) <- reg",
        "MOVB reg <- imm8",
        //
        "MOVW reg <- reg",
        "MOVW reg <- (reg)",
        "MOVW (reg) <- reg",
        "MOVW reg <- off16(reg)",
        "MOVW off16(reg) <- reg",
        "MOVW reg <- offreg(basereg, scale)",
        "MOVW offreg(basereg, scale) <- reg",
        "MOVW reg <- imm16",
        // 0xb0
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        // stack manipulation 0xc0
        "PUSH reg",
        "PUSH (reg)",
        "PUSH off(reg)",
        "PUSH offreg(basereg, scale)",
        "PUSH imm16",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "POP reg",
        // 0xd0
        "CALL",
        "RET",
        "RETC",
        "OUT",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0xe0
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        // 0xf0
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        //
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "UND",
        "HLT"};